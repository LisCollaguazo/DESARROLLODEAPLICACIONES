import sqlite3

class Producto:
    def __init__(self, id_producto: int, nombre: str, cantidad: int, precio: float):
        self._id = id_producto
        self._nombre = nombre
        self._cantidad = cantidad
        self._precio = precio

    # Getters
    def get_id(self):
        return self._id

    def get_nombre(self):
        return self._nombre

    def get_cantidad(self):
        return self._cantidad

    def get_precio(self):
        return self._precio

    # Setters
    def set_nombre(self, nombre: str):
        self._nombre = nombre

    def set_cantidad(self, cantidad: int):
        self._cantidad = cantidad

    def set_precio(self, precio: float):
        self._precio = precio

    def __str__(self):
        return f"ID: {self._id} | Nombre: {self._nombre} | Cantidad: {self._cantidad} | Precio: ${self._precio:.2f}"


class Inventario:
    def __init__(self, db_name="inventario.db"):
        self.productos = {}  # Diccionario: clave=ID, valor=Producto
        self.db_name = db_name
        self._crear_tabla()

    def _conectar(self):
        return sqlite3.connect(self.db_name)

    def _crear_tabla(self):
        with self._conectar() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS productos (
                    id INTEGER PRIMARY KEY,
                    nombre TEXT NOT NULL,
                    cantidad INTEGER NOT NULL,
                    precio REAL NOT NULL
                )
            ''')
            conn.commit()
        self._cargar_desde_db()

    def _cargar_desde_db(self):
        """Carga los productos desde la base de datos al diccionario."""
        with self._conectar() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT id, nombre, cantidad, precio FROM productos")
            filas = cursor.fetchall()
            self.productos.clear()
            for fila in filas:
                id_producto, nombre, cantidad, precio = fila
                self.productos[id_producto] = Producto(id_producto, nombre, cantidad, precio)

    def agregar_producto(self, producto: Producto):
        if producto.get_id() in self.productos:
            print("Error: Ya existe un producto con ese ID.")
            return False
        self.productos[producto.get_id()] = producto
        with self._conectar() as conn:
            cursor = conn.cursor()
            cursor.execute("INSERT INTO productos (id, nombre, cantidad, precio) VALUES (?, ?, ?, ?)",
                           (producto.get_id(), producto.get_nombre(), producto.get_cantidad(), producto.get_precio()))
            conn.commit()
        print("Producto agregado correctamente.")
        return True

    def eliminar_producto(self, id_producto: int):
        if id_producto not in self.productos:
            print("Error: No existe un producto con ese ID.")
            return False
        del self.productos[id_producto]
        with self._conectar() as conn:
            cursor = conn.cursor()
            cursor.execute("DELETE FROM productos WHERE id = ?", (id_producto,))
            conn.commit()
        print("Producto eliminado correctamente.")
        return True

    def actualizar_producto(self, id_producto: int, cantidad=None, precio=None):
        if id_producto not in self.productos:
            print("Error: No existe un producto con ese ID.")
            return False
        producto = self.productos[id_producto]
        if cantidad is not None:
            producto.set_cantidad(cantidad)
        if precio is not None:
            producto.set_precio(precio)
        with self._conectar() as conn:
            cursor = conn.cursor()
            cursor.execute("UPDATE productos SET cantidad = ?, precio = ? WHERE id = ?",
                           (producto.get_cantidad(), producto.get_precio(), id_producto))
            conn.commit()
        print("Producto actualizado correctamente.")
        return True

    def buscar_por_nombre(self, nombre: str):
        """Devuelve lista de productos cuyo nombre contiene la cadena (case insensitive)."""
        nombre = nombre.lower()
        resultados = [p for p in self.productos.values() if nombre in p.get_nombre().lower()]
        return resultados

    def mostrar_todos(self):
        if not self.productos:
            print("El inventario está vacío.")
            return
        print("Productos en inventario:")
        for producto in self.productos.values():
            print(producto)


def menu():
    inventario = Inventario()

    while True:
        print("\n--- Menú de Gestión de Inventario ---")
        print("1. Añadir nuevo producto")
        print("2. Eliminar producto por ID")
        print("3. Actualizar cantidad o precio de un producto")
        print("4. Buscar productos por nombre")
        print("5. Mostrar todos los productos")
        print("6. Salir")

        opcion = input("Seleccione una opción: ")

        if opcion == "1":
            try:
                id_producto = int(input("Ingrese ID del producto (número entero): "))
                nombre = input("Ingrese nombre del producto: ")
                cantidad = int(input("Ingrese cantidad: "))
                precio = float(input("Ingrese precio: "))
                producto = Producto(id_producto, nombre, cantidad, precio)
                inventario.agregar_producto(producto)
            except ValueError:
                print("Error: Entrada inválida. Intente de nuevo.")

        elif opcion == "2":
            try:
                id_producto = int(input("Ingrese ID del producto a eliminar: "))
                inventario.eliminar_producto(id_producto)
            except ValueError:
                print("Error: ID inválido.")

        elif opcion == "3":
            try:
                id_producto = int(input("Ingrese ID del producto a actualizar: "))
                cantidad_input = input("Ingrese nueva cantidad (deje vacío para no cambiar): ")
                precio_input = input("Ingrese nuevo precio (deje vacío para no cambiar): ")

                cantidad = int(cantidad_input) if cantidad_input.strip() != "" else None
                precio = float(precio_input) if precio_input.strip() != "" else None

                if cantidad is None and precio is None:
                    print("No se ingresaron cambios.")
                else:
                    inventario.actualizar_producto(id_producto, cantidad, precio)
            except ValueError:
                print("Error: Entrada inválida.")

        elif opcion == "4":
            nombre = input("Ingrese nombre o parte del nombre para buscar: ")
            resultados = inventario.buscar_por_nombre(nombre)
            if resultados:
                print(f"Se encontraron {len(resultados)} producto(s):")
                for p in resultados:
                    print(p)
            else:
                print("No se encontraron productos con ese nombre.")

        elif opcion == "5":
            inventario.mostrar_todos()

        elif opcion == "6":
            print("Saliendo del programa...")
            break

        else:
            print("Opción inválida. Intente de nuevo.")


if __name__ == "__main__":
    menu()
